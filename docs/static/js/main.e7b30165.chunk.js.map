{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["products","id","name","price","columns","dataField","text","sort","App","className","Container","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","NavDropdown","title","Item","Divider","eventKey","Form","InputGroup","Prepend","Text","Control","type","placeholder","Append","Button","bootstrap4","keyField","data","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2RAaMA,G,OAA0D,CAC9D,CAAEC,GAAI,IAAKC,KAAM,OAAQC,MAAO,KAChC,CAAEF,GAAI,IAAKC,KAAM,OAAQC,MAAO,KAChC,CAAEF,GAAI,IAAKC,KAAM,OAAQC,MAAO,KAChC,CAAEF,GAAI,IAAKC,KAAM,OAAQC,MAAO,KAChC,CAAEF,GAAI,IAAKC,KAAM,OAAQC,MAAO,KAChC,CAAEF,GAAI,IAAKC,KAAM,OAAQC,MAAO,KAChC,CAAEF,GAAI,IAAKC,KAAM,OAAQC,MAAO,OAE5BC,EAAU,CACd,CACEC,UAAW,KACXC,KAAM,aACNC,MAAM,GAER,CACEF,UAAW,OACXC,KAAM,eACNC,MAAM,GAER,CACEF,UAAW,QACXC,KAAM,kBA2DKE,EAxDO,WACpB,OACE,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,UAAUC,QAAQ,QACxD,kBAACJ,EAAA,EAAOK,MAAR,CAAcC,KAAK,SAAnB,mBACA,kBAACN,EAAA,EAAOO,OAAR,CAAeC,gBAAc,0BAC7B,kBAACR,EAAA,EAAOS,SAAR,CAAiBnB,GAAG,yBAClB,kBAACoB,EAAA,EAAD,CAAKZ,UAAU,WACb,kBAACY,EAAA,EAAIC,KAAL,CAAUL,KAAK,aAAf,YACA,kBAACI,EAAA,EAAIC,KAAL,CAAUL,KAAK,YAAf,WACA,kBAACM,EAAA,EAAD,CAAaC,MAAM,WAAWvB,GAAG,2BAC/B,kBAACsB,EAAA,EAAYE,KAAb,CAAkBR,KAAK,eAAvB,UACA,kBAACM,EAAA,EAAYE,KAAb,CAAkBR,KAAK,eAAvB,kBAGA,kBAACM,EAAA,EAAYE,KAAb,CAAkBR,KAAK,eAAvB,aAGA,kBAACM,EAAA,EAAYG,QAAb,MACA,kBAACH,EAAA,EAAYE,KAAb,CAAkBR,KAAK,eAAvB,oBAKJ,kBAACI,EAAA,EAAD,KACE,kBAACA,EAAA,EAAIC,KAAL,CAAUL,KAAK,UAAf,cACA,kBAACI,EAAA,EAAIC,KAAL,CAAUK,SAAU,EAAGV,KAAK,UAA5B,iBAMN,kBAACW,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYpB,UAAU,QACpB,kBAACoB,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWE,KAAZ,CAAiB9B,GAAG,gBAApB,WAEF,kBAAC2B,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOC,YAAY,gBACtC,kBAACL,EAAA,EAAWM,OAAZ,KACE,kBAACC,EAAA,EAAD,kBAKN,kBAAC,IAAD,CACEC,YAAU,EACVC,SAAS,KACTC,KAAMvC,EACNI,QAASA,OC3ECoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.e7b30165.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Button,\n  Form,\n  InputGroup,\n  Navbar,\n  Nav,\n  NavDropdown,\n  Container\n} from \"react-bootstrap\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport \"./App.css\";\n\nconst products: { id: string; name: string; price: number }[] = [\n  { id: \"1\", name: \"hihi\", price: 223 },\n  { id: \"2\", name: \"hihi\", price: 223 },\n  { id: \"3\", name: \"hihi\", price: 223 },\n  { id: \"4\", name: \"hihi\", price: 223 },\n  { id: \"5\", name: \"hihi\", price: 223 },\n  { id: \"6\", name: \"hihi\", price: 223 },\n  { id: \"7\", name: \"hihi\", price: 223 }\n];\nconst columns = [\n  {\n    dataField: \"id\",\n    text: \"Product ID\",\n    sort: true\n  },\n  {\n    dataField: \"name\",\n    text: \"Product Name\",\n    sort: true\n  },\n  {\n    dataField: \"price\",\n    text: \"Product Price\"\n  }\n];\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Container>\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"primary\" variant=\"dark\">\n          <Navbar.Brand href=\"#home\">React-Bootstrap</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n          <Navbar.Collapse id=\"responsive-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <Nav.Link href=\"#features\">Features</Nav.Link>\n              <Nav.Link href=\"#pricing\">Pricing</Nav.Link>\n              <NavDropdown title=\"Dropdown\" id=\"collasible-nav-dropdown\">\n                <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n                <NavDropdown.Item href=\"#action/3.2\">\n                  Another action\n                </NavDropdown.Item>\n                <NavDropdown.Item href=\"#action/3.3\">\n                  Something\n                </NavDropdown.Item>\n                <NavDropdown.Divider />\n                <NavDropdown.Item href=\"#action/3.4\">\n                  Separated link\n                </NavDropdown.Item>\n              </NavDropdown>\n            </Nav>\n            <Nav>\n              <Nav.Link href=\"#deets\">More deets</Nav.Link>\n              <Nav.Link eventKey={2} href=\"#memes\">\n                Dank memes\n              </Nav.Link>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n        <Form>\n          <InputGroup className=\"mb-3\">\n            <InputGroup.Prepend>\n              <InputGroup.Text id=\"basic-addon3\">Upload</InputGroup.Text>\n            </InputGroup.Prepend>\n            <Form.Control type=\"file\" placeholder=\"Enter email\" />\n            <InputGroup.Append>\n              <Button>Browse</Button>\n            </InputGroup.Append>\n          </InputGroup>\n        </Form>\n\n        <BootstrapTable\n          bootstrap4\n          keyField=\"id\"\n          data={products}\n          columns={columns}\n        />\n      </Container>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}