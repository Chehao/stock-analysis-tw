{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["columns","dataField","text","sort","formatter","cell","moment","format","App","props","useState","files","setFiles","localStorage","getItem","JSON","parse","data","setData","useDropzone","disabled","onDrop","acceptedFiles","map","file","Object","assign","preview","URL","createObjectURL","fileReader","FileReader","onload","event","result","target","workbook","XLSX","type","cellDates","sheet","Sheets","hasOwnProperty","console","log","concat","sheet_to_json","d","slice","n","i","id","setItem","stringify","e","error","readAsBinaryString","getRootProps","getInputProps","fs","key","name","size","className","Container","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","NavDropdown","title","Item","Divider","eventKey","classes","bootstrap4","keyField","bordered","pagination","paginationFactory","sizePerPage","showTotal","sizePerPageList","Row","Col","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.85b37c1f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { Navbar, Nav, NavDropdown, Container, Row, Col } from \"react-bootstrap\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport \"./App.css\";\nimport * as XLSX from 'xlsx';\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\nimport moment from 'moment';\n\nconst columns = [\n  {\n    dataField: \"id\",\n    text: \"ID\",\n    sort: true\n  },\n  {\n    dataField: \"成交\",\n    text: \"成交日期\",\n    formatter: (cell: Date) => moment(cell).format('YYYY-MM-DD'),\n    sort: true\n  },\n  {\n    dataField: \"股票\",\n    text: \"股票\",\n    sort: true\n  },\n  {\n    dataField: \"成交_1\",\n    text: \"成交量\",\n    sort: true\n  },\n  { dataField: \"價金\",\n    text: \"價金\",\n    sort: true\n  },\n  {\n    dataField: \"手續費\",\n    text: \"手續費\",\n    sort: true\n  },\n  {\n    dataField: \"損益\",\n    text: \"損益\",\n    sort: true\n  }\n];\n\nconst App: React.FC = props => {\n  const [files, setFiles] = useState<File[]>([]);\n  const [data, setData] = useState<object[]>(\n    localStorage.getItem(\"stock\") ? JSON.parse(localStorage.getItem(\"stock\") as string): []\n  );\n  const { getRootProps, getInputProps } = useDropzone({\n    disabled: false,\n    onDrop: acceptedFiles => {\n      setFiles(acceptedFiles.map(file => \n        Object.assign(file, {\n          preview: URL.createObjectURL(file)\n        })\n      ));\n      const fileReader = new FileReader();\n      fileReader.onload = (event: ProgressEvent<FileReader>) => {\n        try {\n            const result = event.target!.result; // 以二進制流方式讀取得到整份excel表格對象\n            const workbook = XLSX.read(result, { type: \"binary\", cellDates: true });\n            let data: object[] = [];\n            for (const sheet in workbook.Sheets) {\n                if (workbook.Sheets.hasOwnProperty(sheet)) {\n                    // 利用 sheet_to_json 方法將 excel 轉成 json 數據\n                    console.log(sheet);\n                    data = data.concat(\n                        XLSX.utils.sheet_to_json(workbook.Sheets[sheet])\n                    ); // break; // 如果只取第一張表，就取消註釋這行\n                }\n            }\n            const d = data.slice(1, -1).map( (n, i) => ({ id:i, ...n}) );\n            setData(d);\n            localStorage.setItem('stock', JSON.stringify(d));\n        } catch (e) {\n            console.error(e);\n            return;\n        }\n      }; // 以二進制方式打開文件\n      fileReader.readAsBinaryString(acceptedFiles[0]);\n    }\n  });\n  const fs = files.map(file => (\n    <li key={file.name}>\n      {file.name} - {file.size} bytes\n    </li>\n  ));\n  return (\n    <div className=\"App\">\n      <Container>\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"primary\" variant=\"dark\">\n          <Navbar.Brand href=\"#home\">元大投資xlsx匯入</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n          <Navbar.Collapse id=\"responsive-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <Nav.Link href=\"#features\">Features</Nav.Link>\n              <Nav.Link href=\"#pricing\">Pricing</Nav.Link>\n              <NavDropdown title=\"Dropdown\" id=\"collasible-nav-dropdown\">\n                <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n                <NavDropdown.Item href=\"#action/3.2\">\n                  Another action\n                </NavDropdown.Item>\n                <NavDropdown.Item href=\"#action/3.3\">\n                  Something\n                </NavDropdown.Item>\n                <NavDropdown.Divider />\n                <NavDropdown.Item href=\"#action/3.4\">\n                  Separated link\n                </NavDropdown.Item>\n              </NavDropdown>\n            </Nav>\n            <Nav>\n              <Nav.Link href=\"#deets\">More deets</Nav.Link>\n              <Nav.Link eventKey={2} href=\"#memes\">\n                Dank memes\n              </Nav.Link>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n        <BootstrapTable\n          classes=\"table-sm\"\n          bootstrap4\n          keyField=\"id\"\n          data={data}\n          bordered={false}\n          columns={columns}\n          pagination={paginationFactory({ sizePerPage: 50, showTotal: true, sizePerPageList: [25, 50, 100, 250, 500] })}\n        />\n        <Row>\n          <Col>\n            <section className=\"container\">\n              <div {...getRootProps({ className: \"dropzone disabled\" })}>\n                <input {...getInputProps()} />\n                <p>Drag 'n' drop some files here, or click to select files</p>\n              </div>\n              <aside>\n                <h4>Files</h4>\n                <ul>{fs}</ul>\n              </aside>\n            </section>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}